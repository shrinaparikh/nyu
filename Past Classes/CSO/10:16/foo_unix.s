
	// This code, generated by gcc from foo.s, shows how the
	// parameters passed on the stack are accessed as offsets
	// from the base pointer, %rbp.

	.section	__TEXT,__text,regular,pure_instructions
	.globl	_foo                    ## -- Begin function foo
	.p2align	4, 0x90
_foo:                                   ## @foo
## %bb.0:
	pushq	%rbp
	movq	%rsp, %rbp

	leal	(%rdi,%rsi), %eax  #this computes %rdi + %rsi (i.e. a + b)
	addl	%edx, %eax      # this adds c
	addl	%ecx, %eax      # this adds d
	addl	%r8d, %eax      # this adds e
	addl	%r9d, %eax      # this adds f
	addl	16(%rbp), %eax	# this adds g //why doesn't it start at 24 instead of 16bc there are a,b,c,e,d,f = 6 vars being pushed onto the stack?
    addl	24(%rbp), %eax  # this adds h
	addl	32(%rbp), %eax  # this adds i
	addl	40(%rbp), %eax  # this adds j
	popq	%rbp
	retq

///why are the numbers here increasing by 8 not 4?
//ANS: bc this compiler in specific prefers to use 8 over 4
//can use 4 when writing assembly by hand and it would work

